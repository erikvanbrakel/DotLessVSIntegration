
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

<!--
*************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
This code is licensed under the Visual Studio SDK license terms.
THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
*************************************************************************
-->












  <UsingTask TaskName="FindVsSDKInstallation" AssemblyFile="Microsoft.VsSDK.Build.Tasks.dll" />
  <UsingTask TaskName="Ctc" AssemblyFile="Microsoft.VsSDK.Build.Tasks.dll" />
  <UsingTask TaskName="CtoResourceMerger" AssemblyFile="Microsoft.VsSDK.Build.Tasks.dll" />
  <UsingTask TaskName="DevEnvSetup" AssemblyFile="Microsoft.VsSDK.Build.Tasks.dll" />
  <UsingTask TaskName="MPLex" AssemblyFile="Microsoft.VsSDK.Build.Tasks.dll" />
  <UsingTask TaskName="RegPkg" AssemblyFile="Microsoft.VsSDK.Build.Tasks.dll" />
  <UsingTask TaskName="VsTemplatePaths" AssemblyFile="Microsoft.VsSDK.Build.Tasks.dll" />
  <UsingTask TaskName="CalculateZipItems" AssemblyFile="Microsoft.VsSDK.Build.Tasks.dll" />
  <UsingTask TaskName="GetVSTemplateItems" AssemblyFile="Microsoft.VsSDK.Build.Tasks.dll" />
  <UsingTask TaskName="ZipItems" AssemblyFile="Microsoft.VsSDK.Build.Tasks.dll" />
  <UsingTask TaskName="CopyIfChanged" AssemblyFile="Microsoft.VsSDK.Build.Tasks.dll" />
  <UsingTask TaskName="VSCTCompiler" AssemblyFile="Microsoft.VsSDK.Build.Tasks.dll" />

  <!--
    Set the general properties for this installation of the SDK
  -->
  <PropertyGroup>
    <VsSDKVersion>9.0</VsSDKVersion>
    <VSSDKTargetPlatformVersion>9.0</VSSDKTargetPlatformVersion>
    <VSSDKTargetPlatformRegRoot>Software\Microsoft\VisualStudio\$(VSSDKTargetPlatformVersion)</VSSDKTargetPlatformRegRoot>
  </PropertyGroup>

  <Target Name="FindSDKInstallation"
          Condition="'$(VsSDKInstall)'==''">
    <FindVsSDKInstallation SDKVersion="$(VsSDKVersion)">
      <Output TaskParameter="InstallationPath" PropertyName="VsSDKInstall" />
      <Output TaskParameter="IncludesPath" PropertyName="VsSDKIncludes" />
      <Output TaskParameter="ToolsPath" PropertyName="VsSDKToolsPath" />
    </FindVsSDKInstallation>
  </Target>

  <PropertyGroup>
    <TargetVSVersion Condition="'$(TargetVSVersion)' == ''">$(VSSDKTargetPlatformVersion)</TargetVSVersion>
  </PropertyGroup>

  <!--
    =======================================================================================================
                                                CTC Compilation
    =======================================================================================================
  -->
  <ItemGroup>
    <!-- Define the standard include path for the CTC compiler. -->
    <CtcIncludePath Condition="'$(VsSDKIncludes)' != ''" Include="$(VsSDKIncludes);$(VsSDKIncludes)office10" >
      <InProject>false</InProject>
    </CtcIncludePath>
  </ItemGroup>

  <PropertyGroup>
    <CtcCompileDependsOn>$(CtcCompileDependsOn);FindSDKInstallation</CtcCompileDependsOn>
  </PropertyGroup>
  
  <Target Name="CtcCompile"
          Inputs="@(CtcFile)" 
          Outputs="@(CtcFile->'$(IntermediateOutputPath)%(FileName).cto')" 
          DependsOnTargets="$(CtcCompileDependsOn)"
          Condition="'$(BuildingProject)'!='false'">

    <Ctc IncludeDirs="@(CtcIncludePath);$(VsSDKIncludes);$(VsSDKIncludes)\office10" 
         Inputs="@(CtcFile)" 
         Defines="$(CtcDefines)" 
         OutputFile="@(CtcFile->'$(IntermediateOutputPath)%(FileName).cto')"
         ProductVersion="$(TargetVSVersion)" 
         SDKVersion="$(VsSDKVersion)" >
    </Ctc>

    <!--Record the CTC compile CTO outputs.-->
    <CreateItem Include="@(CtcFile->'$(IntermediateOutputPath)%(FileName).cto')" Condition="Exists('@(CtcFile->'$(IntermediateOutputPath)%(FileName).cto')')">
      <Output TaskParameter="Include" ItemName="FileWrites"/>
    </CreateItem>

    <!--Record the CTC compile CTSYM outputs.-->
    <CreateItem Include="@(CtcFile->'$(IntermediateOutputPath)%(FileName).ctsym')" Condition="Exists('@(CtcFile->'$(IntermediateOutputPath)%(FileName).ctsym')')">
      <Output TaskParameter="Include" ItemName="FileWrites"/>
    </CreateItem>

  </Target>

  <!--
    =======================================================================================================
                                                VSCT Compilation
    =======================================================================================================
  -->
  <PropertyGroup>
    <VSCTCompileDependsOn>$(VSCTCompileDependsOn);FindSDKInstallation</VSCTCompileDependsOn>
    <!--Make sure that the __CTC__ macro is defined. This macro is used in common headers
        like vsshids.h, so we need it for every VSCT compilation.-->
    <__internal_VSCTDefinitions>__CTC__;_CTC_GUIDS_;$(VSCTDefinitions)</__internal_VSCTDefinitions>
  </PropertyGroup>

  <Target Name="VSCTCompile"
          DependsOnTargets="$(VSCTCompileDependsOn)"
          Condition="'$(BuildingProject)' != 'false' And '@(VSCTCompile)' != ''">
    
    <!--Create the list of include path to use for the VSCT compilation-->
    <!--As first add the user provided folders-->
    <CreateItem Include="@(VSCTIncludePath)" Condition="'@(VSCTIncludePath)' != ''">
      <Output TaskParameter="Include" ItemName="_InternalVSCTIncludePath"/>
    </CreateItem>
    <!--Now add the internal folders-->
    <CreateItem Include="$(VsSDKIncludes)" Condition="'$(VsSDKIncludes)' != ''">
      <Output TaskParameter="Include" ItemName="_InternalVSCTIncludePath"/>
    </CreateItem>
    <CreateItem Include="$(VsSDKIncludes)\office10" Condition="'$(VsSDKIncludes)' != ''">
      <Output TaskParameter="Include" ItemName="_InternalVSCTIncludePath"/>
    </CreateItem>

    <VSCTCompiler AdditionalIncludeDirectories="@(_InternalVSCTIncludePath)"
                  IntermediateDirectory="$(IntermediateOutputPath)"
                  Definitions="$(__internal_VSCTDefinitions)"
                  NoLogo="true"
                  OutputFile="@(VSCTCompile->'%(FileName).cto')"
                  Source="@(VSCTCompile)"
                  Verbose="true"
                  SDKVersion="$(VsSDKVersion)" />

    <!--Record the VSCT compile CTO outputs for the Clean task.-->
    <CreateItem Include="@(VSCTCompile->'$(IntermediateOutputPath)%(FileName).cto')" Condition="Exists('@(VSCTCompile->'$(IntermediateOutputPath)%(FileName).cto')')">
      <Output TaskParameter="Include" ItemName="FileWrites"/>
    </CreateItem>
  </Target>

  <!--
    =======================================================================================================
                                              Merging CTO resource
    =======================================================================================================
  -->
  <PropertyGroup>
    <!-- The result of the ctc compilation will be used by the resource generator, so this task
         must depend on the ctc one -->
    <PrepareResourcesDependsOn>$(PrepareResourcesDependsOn);MergeCtoResource</PrepareResourcesDependsOn>
    <MergeCtoResourceDependsOn>$(MergeCtoResourceDependsOn);GenerateListOfCTO;CtcCompile;VSCTCompile</MergeCtoResourceDependsOn>
  </PropertyGroup>

  <!--
    There are two different ways to search for resources in the 2.0 version of MSBuild and newer versions.
    Here we try to find the toolset version in use and add the right target to the dependencies according
    with the version.
  -->
  <Choose>
    <When Condition="'$(MSBuildToolsVersion)' == '2.0' OR '$(MSBuildToolsVersion)' == ''">
      <PropertyGroup>
        <MergeCtoResourceDependsOn>$(MergeCtoResourceDependsOn);GenerateResourceToMergeWithCTO_20</MergeCtoResourceDependsOn>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <MergeCtoResourceDependsOn>$(MergeCtoResourceDependsOn);GenerateResourceToMergeWithCTO</MergeCtoResourceDependsOn>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!--
    Create the list of the .RESOURCES files to merge with the CTO data.
  -->
  <Target Name="GenerateResourceToMergeWithCTO_20"
          DependsOnTargets="ResGen">
    <!-- No need to remove ManifestResource items from this target as it is for 2.0 where that's OK -->
    <CreateItem Include="@(ManifestResourceWithCulture);@(ManifestResourceWithNoCulture)" Condition="'%(ManifestResourceWithCulture.MergeWithCTO)'=='true' Or '%(ManifestResourceWithNoCulture.MergeWithCTO)'=='true'">
      <Output TaskParameter="Include" ItemName="_ResourcesToMergeWithCTO" />
    </CreateItem>
  </Target>
  <Target Name="GenerateResourceToMergeWithCTO"
          DependsOnTargets="ResGen">
    <CreateItem Include="%(EmbeddedResource.OutputResource)" Condition="'%(EmbeddedResource.MergeWithCTO)'=='true'">
      <Output TaskParameter="Include" ItemName="_ResourcesToMergeWithCTO" />
    </CreateItem>
  </Target>
  
  <!--
  Create the list of the expected CTO files.
  -->
  <Target Name="GenerateListOfCTO">
    <!--Add the CTO files from the list of CTC files.-->
    <CreateItem Include="@(CtcFile->'$(IntermediateOutputPath)%(FileName).cto')" Condition="'@(CtcFile)' != ''">
      <Output TaskParameter="Include" ItemName="_GeneratedCTOFiles"/>
    </CreateItem>
    <!--Add the CTO files from the list of VSCT files.-->
    <CreateItem Include="@(VSCTCompile->'$(IntermediateOutputPath)%(FileName).cto')" Condition="'@(VSCTCompile)' != ''">
      <Output TaskParameter="Include" ItemName="_GeneratedCTOFiles"/>
    </CreateItem>
  </Target>
  
  <Target Name="MergeCtoResource"
          Condition="('@(CtcFile)'!='' OR '@(VSCTCompile)' != '') AND '$(BuildingProject)'!='false'"
          DependsOnTargets="$(MergeCtoResourceDependsOn)">

    <CtoResourceMerger DestinationResource="$(PackageResources)"
                       CtoFile="@(_GeneratedCTOFiles)" 
                       ResourcesToMerge="@(_ResourcesToMergeWithCTO)" >
      <Output TaskParameter="GeneratedResource" ItemName="MergedCtoResource" />
    </CtoResourceMerger>
    
  </Target>

  <!-- 
    Use ManifestResourceWithNoCulture when targetting 2.0 as that system doesn't support WithCulture on EmbeddedResource 
    Use EmbeddedResource for > 2.0 as ManifestResourceWithNoCulture is deprecated in that environment
    -->
  <Choose>
    <When Condition="'$(MSBuildToolsVersion)' == '2.0' OR '$(MSBuildToolsVersion)' == ''">
      <ItemGroup>
        <ManifestResourceWithNoCulture Include="$(MergedCtoResource)" >
          <InProject>false</InProject>
        </ManifestResourceWithNoCulture>
      </ItemGroup>
    </When>
    <Otherwise>
      <ItemGroup>
        <EmbeddedResource Include="$(MergedCtoResource)" >
          <Type>Non-Resx</Type>
          <WithCulture>false</WithCulture>
          <InProject>false</InProject>
        </EmbeddedResource>
      </ItemGroup>
    </Otherwise>
  </Choose>

  <!--
    =======================================================================================================
                                       Generate code from LEX files
    =======================================================================================================
  -->
  <PropertyGroup>
    <!--Make sure that the lexer runs before the C# compiler-->
    <CoreCompileDependsOn>$(CoreCompileDependsOn);GenerateCodeFromLex</CoreCompileDependsOn>
  </PropertyGroup>
  <!--
    TODO: When MPLex.exe will allow us to specify the name / path of the output file we should change this
    target to use custom output names and use @(MPLexCompile->'$(IntermediateOutputPath)%(FileName).cs')
    as default.
  -->
  <Target Name="GenerateCodeFromLex"
          Condition="'$(BuildingProject)'!='false'"
          Inputs="@(MPLexCompile);$(LexFrameFile)"
          Outputs="@(MPLexCompile->'$(IntermediateOutputPath)%(FileName).cs')"
          DependsOnTargets="$(GenerateCodeFromLexDependsOn)">

    <MPLex InputFile="@(MPLexCompile)"
           OutputFile="@(MPLexCompile->'$(IntermediateOutputPath)%(FileName).cs')"
           CompressTables="$(CompressTables)"
           FrameFile="$(LexFrameFile)" 
           SDKVersion="$(VsSDKVersion)">
      <Output TaskParameter="OutputFile" ItemName="Compile" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites"/>
    </MPLex>

  </Target>

  <!--
    =======================================================================================================
                                      Generate parser code from Y files
    =======================================================================================================
  -->
  <PropertyGroup>
    <GenerateParserCodeFromGrammarDependsOn>$(GenerateParserCodeFromGrammarDependsOn);FindSDKInstallation</GenerateParserCodeFromGrammarDependsOn>
    <CoreCompileDependsOn>$(CoreCompileDependsOn);GenerateParserCodeFromGrammar</CoreCompileDependsOn>
  </PropertyGroup>
  <Target Name="GenerateParserCodeFromGrammar"
          Condition="'$(BuildingProject)'!='false'"
          Inputs="@(MPPGCompile)"
          Outputs="@(MPPGCompile->'$(IntermediateOutputPath)%(FileName).cs')"
          DependsOnTargets="$(GenerateParserCodeFromGrammarDependsOn)">

    <!--Check if there are .lex files in the project because in this case mppg should generate the base classes
        used by the code generated by MPLex-->
    <CreateProperty Value="-mplex" Condition="'@(MPLexCompile)' != ''">
      <Output TaskParameter="ValueSetByTask" PropertyName="__GenerateForMPLex" />
    </CreateProperty>
    
    <!--Run the command line tool that generates the cs files.-->
    <Exec Command="&quot;$(VsSDKToolsPath)\MPPG.exe&quot; $(__GenerateForMPLex) @(MPPGCompile->'&quot;%(Identity)&quot;') > @(MPPGCompile->'&quot;$(IntermediateOutputPath)%(FileName).cs&quot;')" />

    <!--Add the generated files to the list of the files to compile.-->
    <CreateItem Include="@(MPPGCompile->'$(IntermediateOutputPath)%(FileName).cs')">
      <Output TaskParameter="Include" ItemName="Compile" />
      <Output TaskParameter="Include" ItemName="FileWrites"/>
    </CreateItem>
  </Target>

  <!--
    =======================================================================================================
                                         Registering Managed Packages
    =======================================================================================================
  -->

  <PropertyGroup>
    <RegisterManagedPackageDependsOn>$(RegisterManagedPackageDependsOn);CoreBuild</RegisterManagedPackageDependsOn>
  </PropertyGroup>

  <!-- Find the registry root and version of RegPkg to use -->
  <PropertyGroup>
    <__InternalTargetRoot>$(TargetRegistryRoot)</__InternalTargetRoot>
    <__InternalTargetRoot Condition=" '$(__InternalTargetRoot)' == ''">$(VSSDKTargetPlatformRegRoot)Exp</__InternalTargetRoot>
    <__InternalUseMPF80>false</__InternalUseMPF80>
    <__InternalUseMPF80 Condition="'$(UseVS2005MPF)' == 'true'">true</__InternalUseMPF80>
    <RegisterWithRanu Condition="'$(RegisterWithRanu)' == ''">true</RegisterWithRanu>
  </PropertyGroup>
  
  <Target Name="RegisterManagedPackage"
          Condition="'$(RegisterOutputPackage)'=='true'" 
          DependsOnTargets="$(RegisterManagedPackageDependsOn)">
    
    <RegPkg ItemToRegister="$(TargetPath)"
            ProductVersion="$(TargetVSVersion)"
            StateFile="$(IntermediateOutputPath)\RegPkg.cache"
            RegistrationRoot="$(__InternalTargetRoot)"
            SDKVersion="$(VsSDKVersion)"
            Unregister="false"
            UseCodebase="$(RegisterWithCodebase)"
            UseRanu="$(RegisterWithRanu)"
            UseVS2005MPF="$(__InternalUseMPF80)" />
    
  </Target>

  <!--
    =======================================================================================================
                                         Generating PkgDef File
    =======================================================================================================
  -->
    <PropertyGroup>
        <PrepareForRunDependsOn>$(PrepareForRunDependsOn);GeneratePkgDef</PrepareForRunDependsOn>
        <GeneratePkgDefDependsOn>$(GeneratePkgDefDependsOn);Compile</GeneratePkgDefDependsOn>
        <GeneratePkgDefFile Condition="'$(GeneratePkgDefFile)' == ''">true</GeneratePkgDefFile>
    </PropertyGroup>

    <Target Name="GeneratePkgDef"
            Inputs="$(TargetPath)"
            Outputs="$(IntermediateOutputPath)$(TargetName).pkgdef"
            Condition="'$(GeneratePkgDefFile),$(__InternalUseMPF80)'=='true,false'"
            DependsOnTargets="$(GeneratePkgDefDependsOn)">

        <RegPkg ItemToRegister="$(TargetPath)"
                ProductVersion="$(TargetVSVersion)"
                RegistrationRoot="$(__InternalTargetRoot)"
                SDKVersion="$(VsSDKVersion)"
                OutputFile="$(IntermediateOutputPath)$(TargetName).pkgdef"
                Unregister="false"
                UseVS2005MPF="$(__InternalUseMPF80)" />
        <CopyIfChanged  SourceFile="$(IntermediateOutputPath)$(TargetName).pkgdef"
                        DestinationFile="$(OutDir)$(TargetName).pkgdef" >
            <Output TaskParameter="DestinationFile" ItemName="FileWrites"/>
        </CopyIfChanged>
    </Target>

    <!--
    =======================================================================================================
                                         Running DevEnv /Setup
    =======================================================================================================
  -->

  <PropertyGroup>
    <BuildDependsOn>$(BuildDependsOn);SettingUpDevenv</BuildDependsOn>
    <SettingUpDevenvDependsOn>$(SettingUpDevenvDependsOn);RegisterManagedPackage</SettingUpDevenvDependsOn>
    <DevenvSetupStateFile>$(IntermediateOutputPath)DevEnvSetup.cache</DevenvSetupStateFile>
  </PropertyGroup>
  <Target Name="SettingUpDevenv"
          Inputs="@(_GeneratedCTOFiles);@(IntermediateZipItem);@(IntermediateZipProject)" 
          Outputs="$(DevenvSetupStateFile)"
          Condition="'$(RegisterOutputPackage)'=='true'"
          DependsOnTargets="$(SettingUpDevenvDependsOn)">

    <DevEnvSetup CTOFiles="@(_GeneratedCTOFiles)"
                 TemplateFiles="@(IntermediateZipItem);@(IntermediateZipProject)"
                 ProductVersion="$(TargetVSVersion)"
                 RegistryRoot="$(__InternalTargetRoot)"
                 StateFile="$(DevenvSetupStateFile)" 
                 UseRANU ="$(RegisterWithRanu)" />

  </Target>

  <!--
    =======================================================================================================
                                         Creating Zip Files
    =======================================================================================================
  -->

  <PropertyGroup>
    <PrepareForRunDependsOn>
      ZipProjects;
      ZipItems;
      $(PrepareForRunDependsOn)
    </PrepareForRunDependsOn>
    <ZipFilesDependsOn>VsTemplatePathsTarget;GetZipFilesFromVSTemplates;CalculateZipFiles</ZipFilesDependsOn>
  </PropertyGroup>

  <!--Make sure that the zip output is set-->
  <PropertyGroup>
    <ZipProjectOutput Condition="'$(ZipProjectOutput)' == ''">$(OutputPath)</ZipProjectOutput>
    <ZipItemOutput Condition="'$(ZipItemOutput)' == ''">$(OutputPath)</ZipItemOutput>
    <ZipIntermediatePath Condition="'$(ZipIntermediatePath)' == ''">$(IntermediateOutputPath)</ZipIntermediatePath>
  </PropertyGroup>

  <Target Name="GetZipFilesFromVSTemplates"
          Condition="'@(VSTemplate)'!=''" >
    <GetVSTemplateItems 
      TemplateFiles="@(VSTemplate)"
      TargetPath="$(ZipIntermediatePath)">
      <Output TaskParameter="ZipItems" ItemName="_ZipItem" />
      <Output TaskParameter="ZipProjects" ItemName="_ZipProject" />
    </GetVSTemplateItems>
  </Target>

  <Target Name="CalculateZipFiles"
          Condition="'@(ZipProject)_@(ZipItem)' != '_'">
    <!--The purpose of this target is to calculate the intermediate path for each ZipProject/ZipItem
      Normally, something like this can be done in a MSBuild Transform, but this is a little more complicated
      for ZipItems/Projects, so we need a custom task-->

    <!--Project using RootPath-->
    <CalculateZipItems
        Condition="'%(ZipProject.RootPath)'!='' AND '@(ZipProject)' != ''"
        Files="@(ZipProject)"
        ProjectPath="$(MSBuildProjectDirectory)"
        ZipName="%(ZipProject.RootPath)"
        TargetPath="$(ZipIntermediatePath)">
      <Output
        TaskParameter="Files"
        ItemName="_ZipProject" />
    </CalculateZipItems>

    <!--Project using Directory-->
    <CalculateZipItems
        Condition="'%(ZipProject.RootPath)'=='' AND '@(ZipProject)' != ''"
        Files="@(ZipProject)"
        ProjectPath="$(MSBuildProjectDirectory)"
        ZipName="%(ZipProject.Directory)"
        TargetPath="$(ZipIntermediatePath)" >
      <Output
        TaskParameter="Files"
        ItemName="_ZipProject" />
    </CalculateZipItems>

    <!--Item using RootPath-->
    <CalculateZipItems
        Condition="'%(ZipItem.RootPath)'!='' AND '@(ZipItem)' != ''"
        Files="@(ZipItem)"
        ProjectPath="$(MSBuildProjectDirectory)"
        ZipName="%(ZipItem.RootPath)"
        TargetPath="$(ZipIntermediatePath)">
      <Output
        TaskParameter="Files"
        ItemName="_ZipItem" />
    </CalculateZipItems>

    <!--Item using Directory-->
    <CalculateZipItems
        Condition="'%(ZipItem.RootPath)'=='' AND '@(ZipItem)' != ''"
        Files="@(ZipItem)"
        ProjectPath="$(MSBuildProjectDirectory)"
        ZipName="%(ZipItem.Directory)"
        TargetPath="$(ZipIntermediatePath)"
        >
      <Output
        TaskParameter="Files"
        ItemName="_ZipItem" />
    </CalculateZipItems>
  </Target>

  <Target Name="ZipProjects"
         Inputs="@(_ZipProject)"
         Outputs="%(ZipFile)"
         DependsOnTargets="$(ZipFilesDependsOn)"
         Condition="'@(_ZipProject)' != '_'">
    <Message Text="Build_Status Zipping ProjectTemplates"/>
    <!--
      There are 2 options for using this task:
        1) specifying a rootpath on each item
        2) using the directory of the item as the rootpath

      Note: the name of the zip file will be based on the rootpath
    -->
    <!--Project using RootPath-->
    <ZipItems
        Condition="'%(_ZipProject.RootPath)'!='' AND '@(_ZipProject)' != ''"
        Files="@(_ZipProject)"
        Action="New"
        OutputSubPath="%(_ZipProject.OutputSubPath)"
        Culture="%(_ZipProject.Culture)"
        ProjectPath="$(MSBuildProjectDirectory)"
        RootPath="$(MSBuildProjectDirectory)\%(_ZipProject.RootPath)"
        ZipDefaultLanguage="$(VsTemplateLanguage)"
        ZipLanguage="%(_ZipProject.Language)"
        ZipFile="%(_ZipProject.ZipFile)">
      <Output TaskParameter="ZipFile" ItemName="IntermediateZipProject"/>
      <Output TaskParameter="ZipFile" ItemName="FileWrites"/>
    </ZipItems>

    <!--Project using Directory-->
    <ZipItems
        Condition="'%(_ZipProject.RootPath)'=='' AND '@(_ZipProject)' != ''"
        Files="@(_ZipProject)"
        Action="New"
        OutputSubPath="%(_ZipProject.OutputSubPath)"
        Culture="%(_ZipProject.Culture)"
        ProjectPath="$(MSBuildProjectDirectory)"
        RootPath="%(_ZipProject.RootDir)%(_ZipProject.Directory)"
        ZipDefaultLanguage="$(VsTemplateLanguage)"
        ZipLanguage="%(_ZipProject.Language)"
        ZipFile="%(_ZipProject.ZipFile)">
      <Output TaskParameter="ZipFile" ItemName="IntermediateZipProject"/>
      <Output TaskParameter="ZipFile" ItemName="FileWrites"/>
    </ZipItems>

    <!--
      Copy the generated templates to the deployment folder.
    -->
    <Copy SourceFiles="@(IntermediateZipProject)"
          DestinationFiles="@(IntermediateZipProject->'$(ZipProjectOutput)\%(Language)\%(OutputSubPath)\%(Culture)\%(FileName)%(Extension)')"
          Condition="'$(RegisterOutputPackage)'=='true'" />
  </Target>

  <Target Name="ZipItems"
          Inputs="@(_ZipItem)"
          Outputs="%(ZipFile)"
          DependsOnTargets="$(ZipFilesDependsOn)"
          Condition="'@(_ZipItem)' != '_'">

    <Message Text="Build_Status Zipping ItemTemplates"/>

    <!--
      There are 2 options for using this task:
        1) specifying a rootpath on each item
        2) using the directory of the item as the rootpath

      Note: the name of the zip file will be based on the rootpath
    -->

    <!--Item using RootPath-->
    <ZipItems
        Condition="'%(_ZipItem.RootPath)'!='' AND '@(_ZipItem)' != ''"
        Files="@(_ZipItem)"
        Action="New"
        OutputSubPath="%(_ZipItem.OutputSubPath)"
        Culture="%(_ZipItem.Culture)"
        ProjectPath="$(MSBuildProjectDirectory)"
        RootPath="$(MSBuildProjectDirectory)\%(_ZipItem.RootPath)"
        ZipDefaultLanguage="$(VsTemplateLanguage)"
        ZipLanguage="%(_ZipItem.Language)"
        ZipFile="%(_ZipItem.ZipFile)">
      <Output TaskParameter="ZipFile" ItemName="IntermediateZipItem"/>
      <Output TaskParameter="ZipFile" ItemName="FileWrites"/>
    </ZipItems>

    <!--Item using Directory-->
    <ZipItems
        Condition="'%(_ZipItem.RootPath)'=='' AND '@(_ZipItem)' != ''"
        Files="@(_ZipItem)"
        Action="New"
        OutputSubPath="%(_ZipItem.OutputSubPath)"
        Culture="%(_ZipItem.Culture)"
        ProjectPath="$(MSBuildProjectDirectory)"
        RootPath="%(_ZipItem.RootDir)%(_ZipItem.Directory)"
        ZipDefaultLanguage="$(VsTemplateLanguage)"
        ZipLanguage="%(_ZipItem.Language)"
        ZipFile="%(_ZipItem.ZipFile)">
      <Output TaskParameter="ZipFile" ItemName="IntermediateZipItem"/>
      <Output TaskParameter="ZipFile" ItemName="FileWrites"/>
    </ZipItems>

    <!--
      Copy the generated templates to the deployment folder.
    -->
    <Copy SourceFiles="@(IntermediateZipItem)"
          DestinationFiles="@(IntermediateZipItem->'$(ZipItemOutput)\%(Language)\%(OutputSubPath)\%(Culture)\%(FileName)%(Extension)')"
          Condition="'$(RegisterOutputPackage)'=='true'" />
  </Target>

  <!--Provide support for setting type (BuildAction) to ZipProject/ZipItem from VS-->
  <ItemGroup>
    <AvailableItemName Include="VSTemplate"/>
    <AvailableItemName Include="ZipProject"/>
    <AvailableItemName Include="ZipItem"/>
  </ItemGroup>

  <!--Target to retrive deployment path for vstemplates zip files-->
  <Target Name="VsTemplatePathsTarget"
          Inputs="$(__InternalTargetRoot);$(VsTemplateLanguage)" 
          Outputs="$(DevenvSetupStateFile)"
          Condition="'$(RegisterOutputPackage)'=='true'"
          DependsOnTargets="$(VsTemplatePathsTargetDependsOn)">

    <VsTemplatePaths
        RegistryHive="$(__InternalTargetRoot)"
        UseRANU="$(RegisterWithRanu)">
      <Output TaskParameter="ProjectTemplates" PropertyName="ZipProjectOutput"/>
      <Output TaskParameter="ItemTemplates" PropertyName="ZipItemOutput"/>
    </VsTemplatePaths>

    <!--Make sure those directories exist-->
    <MakeDir Directories="$(ZipProjectOutput);$(ZipItemOutput)"/>
  </Target>

</Project>
