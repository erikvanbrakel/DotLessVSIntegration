<<Grammar Name="nLess">>
 
//******************************************** Less
^Parse:  primary ;
^^primary: (import / declaration / ruleset / comment)* ;
^^import :  ws '@import'  S import_url medias? s (';'/FATAL<"Semi colon expected">) ;
^^import_url : (string / url) ;
^^medias : [-a-z]+ (s ',' s [a-z]+)*;
^url: 'url(' url_path ')';
^url_path: (string / [-a-zA-Z0-9_%$/.&=:;#+?]+);
^^comment: ws '/*' (!'*/' . )* '*/' ws / ws '//' (![\n] .)* [\n] ws;
^^declaration:  standard_declaration / catchall_declaration ;
standard_declaration: ws (ident / variable)  s ':' s expressions  s (';'/ ws &'}') ws ;
catchall_declaration:  ws ident s ':' s ';' ws ;
^^ident: '*'? '-'? [-_a-zA-Z0-9]+; 
^^variable: '@' [-_a-zA-Z0-9]+; 
^^expressions: operation_expressions / space_delimited_expressions / [-a-zA-Z0-9_%*/.&=:,#+? \[\]()]+ ;
^^operation_expressions:  expression (operator expression)+;
^^space_delimited_expressions: expression (WS expression)* important? ;
^^important: s '!' s 'important' ;
^^expression: '(' s expressions s ')' / entity ;
^^operator: S [-+*/] S / [-+*/] ;
ruleset : standard_ruleset / mixin_ruleset;
^^standard_ruleset: ws selectors [{] ws primary ws [}] ws;
^^mixin_ruleset :  ws selectors ';' ws; 
^^selectors :  ws selector (s ',' ws selector)* ws ;
^^selector : (s select element s)+ arguments? ;
^^arguments : '(' s argument s (',' s argument s)* ')';
^^argument : color / number unit / string / [a-zA-Z]+ '=' dimension / [-a-zA-Z0-9_%$/.&=:;#+?]+ / function / keyword (S keyword)*;
^^element : (class_id / tag / ident) attribute* ('(' ident? attribute* ')')? / attribute+ / '@media' / '@font-face';
^^class_id : tag? (class / id)+;
^^attribute :  '[' tag ([|~*$^]? '=') (tag / string) ']' / '[' (tag / string) ']';
^^class:  '.' [_a-zA-Z] [-a-zA-Z0-9_]*;
^^id: '#' [_a-zA-Z] [-a-zA-Z0-9_]*;
^^tag : [a-zA-Z] [-a-zA-Z]* [0-9]? / '*';
^^select : (s [+>~] s / '::' / s ':' / S)?;
^^function: function_name arguments ;
^^function_name: [-a-zA-Z_]+;
 
//******************************************** Entity
^^entity :  function / fonts / accessor / keyword  / variable / literal  ;
^^accessor: accessor_name '[' accessor_key ']'; 
^^accessor_name: (class_id / tag) ; 
^^accessor_key: (string / variable) ; 
^^fonts : font (s ',' s font)+  ;
^^font: [a-zA-Z] [-a-zA-Z0-9]* / string  ;
^^literal: color / dimension_list / number unit / string ;
^^dimension_list:  (dimension / [-a-z]+) '/' dimension; 
^^keyword: [-a-zA-Z]+ !ns;
^string: ['] (!['] . )* ['] / ["] (!["] . )* ["] ;
^^dimension: number unit;
^^number: '-'? [0-9]* '.' [0-9]+ / '-'? [0-9]+;
^^unit: ('px'/'em'/'pc'/'%'/'ex'/'s'/'pt'/'cm'/'mm')?;
^^color: '#' rgb;
^rgb:(rgb_node)(rgb_node)(rgb_node) / hex hex hex ;
^rgb_node : hex hex;
^hex: [a-fA-F0-9];
 
//******************************************** Common
WS: [ \r\n\t]+;
ws: [ \r\n\t]*;
s:  [ ]*;
S:  [ ]+;
ns: ![ ;\n] .;
<</Grammar>>